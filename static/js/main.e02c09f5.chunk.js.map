{"version":3,"sources":["constants/common.js","hooks/useSelectedLocations.js","redux/actions.js","constants/action-types.js","components/AutocompleteInput.js","hooks/useAutocompleteLocations.js","components/LocationCard.js","hooks/index.js","App.js","redux/middlewares/api.js","redux/reducers.js","redux/store.js","redux/middlewares/thunk.js","index.js"],"names":["baseUrl","process","apiKey","useSelectedLocations","locations","useSelector","state","dispatch","useDispatch","addLocation","useCallback","location","type","payload","removeLocation","AutocompleteInput","useState","query","setQuery","list","autocomplete","loading","debounceFetchLocations","_","debounce","url","queryParams","q","onSuccess","data","onFailure","message","search","useAutocompleteLocations","inputValue","setInputValue","Autocomplete","multiple","filterSelectedOptions","autoComplete","style","width","getOptionLabel","option","LocalizedName","options","value","onChange","event","valueArray","difference","forEach","item","onInputChange","e","reason","renderInput","params","TextField","label","variant","InputProps","endAdornment","CircularProgress","color","size","LocationCard","forecast","setForecast","locationsToForecastsMap","useEffect","body","undefined","urlParams","method","apiCall","Key","fetchForecast","get","useForecast","name","icon","iconNumber","WeatherIcon","useIcon","Skeleton","LocalObservationDateTime","WeatherText","IsDayTime","Temperature","Metric","Value","Unit","time","moment","parseZone","format","Card","Body","Img","src","maxWidth","Title","Subtitle","Grid","container","spacing","Badge","Text","App","margin","marginBottom","alignContent","alignItems","map","key","createUrl","path","URL","param","searchParams","set","Object","entries","initState","error","Map","store","createStore","action","produce","draft","push","console","log","remove","x","delete","composeWithDevTools","applyMiddleware","getState","next","a","fetch","toUpperCase","JSON","stringify","mode","cache","credentials","response","ok","json","status","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e02c09f5.chunk.js","sourcesContent":["export const baseUrl = process.env.REACT_APP_BASE_URL;\nexport const apiKey = process.env.REACT_APP_ACCU_WEATHER_API_KEY;\nexport const delayTime = 500","import { useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addLocation, removeLocation } from '../redux/actions'\n\nexport default function useSelectedLocations() {\n    const locations = useSelector(state => state.locations)\n    const dispatch = useDispatch()\n\n    return {\n        locations,\n        addLocation: useCallback((location) => dispatch(addLocation(location)), [dispatch]),\n        removeLocation: useCallback((location) => dispatch(removeLocation(location)), [dispatch])\n    }\n}\n","import * as actionTypes from '../constants/action-types';\n\nexport const apiStart = () =>\n    ({ type: actionTypes.API_START })\n\nexport const apiEnd = () =>\n    ({ type: actionTypes.API_END })\n\nexport const apiError = (error) => {\n    return { type: actionTypes.API_ERROR, payload: error }\n}\nexport const addLocation = (location) =>\n    ({ type: actionTypes.ADD_LOCATION, payload: location })\n\nexport const showLocations = locations =>\n    ({ type: actionTypes.ShowLocations, payload: locations })\n\nexport const toast = message =>\n    ({ type: actionTypes.toast, payload: message })\n\nexport const fetchLocation = (textQuery) =>\n    ({\n        type: actionTypes.API,\n        payload: {\n            url: 'locations/v1/cities/autocomplete',\n            queryParams: { q: textQuery },\n            onSuccess: data => showLocations(data),\n            onFailure: data => toast(data.message || data)\n        }\n    })\n\nexport const removeLocation = (location) => ({\n    type: actionTypes.REMOVE_LOCATION,\n    payload: location,\n})\n\nexport const apiCall = ({ url, body = undefined, urlParams = [],\n    queryParams = {}, method = 'GET', onSuccess, onFailure }) =>\n    ({\n        type: 'API',\n        payload: {\n            url,\n            body,\n            urlParams,\n            queryParams,\n            method,\n            onSuccess,\n            onFailure\n        }\n    })\n\nexport const fetchForecast = (location) =>\n    apiCall({\n        url: 'currentconditions/v1/',\n        urlParams: [location.Key],\n        onSuccess: forecast => ({\n            type: actionTypes.SET_LOCATION_FORECAST,\n            payload: {location, forecast}\n        })\n    })","export const ADD_LOCATION = 'ADD_LOCATION';\nexport const API = 'API';\nexport const API_START = 'API_START';\nexport const API_END = 'API_END';\nexport const API_ERROR = 'API_ERROR';\nexport const ShowLocations = 'ShowLocations';\nexport const toast = 'toast'\nexport const REMOVE_LOCATION = 'REMOVE_LOCATION'\nexport const SET_LOCATION_FORECAST = 'SET_LOCATION_FORECAST'","import React, { useState } from 'react'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport useAutocompleteLocations from '../hooks/useAutocompleteLocations'\nimport useSelectedLocations from '../hooks/useSelectedLocations'\nimport _ from 'lodash'\n\nfunction AutocompleteInput() {\n    const { list, loading, search } = useAutocompleteLocations()\n    const [inputValue, setInputValue] = useState(\"\");\n    const { locations, addLocation, removeLocation } = useSelectedLocations()\n\n    const handleChange = (event, valueArray) => {\n        _.difference(valueArray, locations).forEach(item => addLocation(item))\n        _.difference(locations, valueArray).forEach(item => removeLocation(item))\n        return locations;\n    }\n\n    return (\n            <Autocomplete\n                multiple\n                filterSelectedOptions\n                autoComplete\n                style={{ width: 300 }}\n                getOptionLabel={option => option?.LocalizedName }\n                options={list}\n                loading={loading}\n                value={locations}\n                onChange={handleChange}\n                inputValue={inputValue}\n                onInputChange={(e, value, reason) => {\n                    setInputValue(value);\n                    if (reason === \"input\") search(value)\n                }}\n                renderInput={params => (\n                    <TextField\n                        {...params}\n                        label=\"Search City...\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            ...params.InputProps,\n                            endAdornment: (\n                                <>\n                                    {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                    {params.InputProps.endAdornment}\n                                </>\n                            ),\n                        }}\n                    />\n                )}\n            />\n    )\n}\n\nexport default AutocompleteInput\n","import { useState, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchLocation } from '../redux/actions'\nimport _ from 'lodash'\nimport { delayTime } from '../constants/common'\n\nexport default function useAutocompleteLocations() {\n    const [query, setQuery] = useState(\"\");\n    const dispatch = useDispatch();\n    const list = useSelector(state => state.autocomplete)\n    const loading = useSelector(state => state.loading);\n  \n    const debounceFetchLocations = useCallback(\n      _.debounce((query) => dispatch(fetchLocation(query)), delayTime),\n      [dispatch])\n  \n    return {\n      query,\n      search: query => {\n        setQuery(query);\n        debounceFetchLocations(query);\n      },\n      list,\n      loading,\n    }\n  }","import React from 'react'\nimport { Card, Badge, Container, Row, Col } from 'react-bootstrap'\nimport { useForecast, useIcon } from '../hooks'\nimport Skeleton from '@material-ui/lab/Skeleton'\nimport { Grid } from '@material-ui/core'\nimport moment from 'moment'\n\nexport default function LocationCard({ location }) {\n\n    const forecast = useForecast(location);\n    const name = location.LocalizedName;\n    const icon = useIcon(forecast)\n\n    if (!forecast) return <Skeleton />\n\n    const { LocalObservationDateTime, WeatherText, IsDayTime,\n        Temperature: { Metric: { Value, Unit } } } = forecast;\n\n    const time = moment.parseZone(LocalObservationDateTime).format('ddd, MMM Do, HH:mm')\n\n    return (\n        <Card>\n            <Card.Body>\n\n                <Card.Img variant=\"top\" src={icon} style={{ maxWidth: '10em' }} />\n\n                <Card.Title>\n                    {name}\n                </Card.Title>\n                <Card.Subtitle style={{ color: \"#7c7c7c\" }}>\n                    {WeatherText}\n                </Card.Subtitle>\n\n                <Grid container spacing={2}>\n                    <Grid item>\n                        {time}\n                    </Grid>\n                    <Grid item>\n                        <Badge variant={IsDayTime ? \"light\": \"dark\"}>\n                            {IsDayTime ? \"Day\" : \"Night\"}\n                        </Badge>\n                    </Grid>\n                </Grid>\n\n                <Card.Text>\n                    <strong>\n                        {Value}{Unit}\n                    </strong>\n                </Card.Text>\n\n            </Card.Body>\n        </Card>\n    )\n}\n","import { useCallback, useEffect, useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addLocation, removeLocation, fetchForecast } from '../redux/actions'\n\nexport function useForecast(location) {\n    const dispatch = useDispatch()\n    const [forecast, setForecast] = useState(null)\n    const locationsToForecastsMap = useSelector(state => state.locationsToForecastsMap)\n    useEffect(() => {\n        dispatch(fetchForecast(location))\n    }, [location, dispatch])\n\n    useEffect(() => {\n        setForecast(locationsToForecastsMap.get(location)?.[0])\n    }, [locationsToForecastsMap.size, location, locationsToForecastsMap])\n\n    return forecast;\n}\n\nexport function useIcon(forecast){\n    if(!forecast) return null;\n    const {WeatherIcon: iconNumber} = forecast\n    const numberString = (iconNumber < 10? '0' : '') + iconNumber\n    return `https://developer.accuweather.com/sites/default/files/${numberString}-s.png`;\n}\n\nexport { default as useAutocompleteLocations } from './useAutocompleteLocations'\nexport { default as useSelectedLocations } from './useSelectedLocations'","import React, { } from 'react';\n// import { Container, Row, Col } from 'react-bootstrap';\nimport { Grid } from '@material-ui/core'\nimport AutocompleteInput from './components/AutocompleteInput'\nimport useSelectedLocations from './hooks/useSelectedLocations'\nimport LocationCard from './components/LocationCard'\n\nfunction App() {\n  const { locations } = useSelectedLocations()\n  return (<>\n    <Grid container style={{ margin: '4vh 2vw' }}>\n      <Grid container item style={{ marginBottom: '1vh' }} alignContent=\"stretch\" alignItems=\"stretch\">\n        <Grid item>\n          <AutocompleteInput />\n        </Grid>\n      </Grid>\n      <Grid container item spacing={2}>\n        {locations\n          .map(location =>\n            <Grid item key={location.Key}>\n              <LocationCard key={location.Key} location={location} />\n            </Grid>\n          )}\n      </Grid>\n    </Grid>\n    <footer>Made with <span style={{ color: \"#f00\" }}>❤</span> by Idan Izicovich</footer>\n  </>\n  );\n}\n\nexport default App;","import { apiStart, apiEnd, apiError } from '../actions';\nimport { apiKey, baseUrl } from '../../constants/common';\n\nconst createUrl = (path, urlParams = [], queryParams = {}) => {\n    let url = new URL(path, baseUrl);\n\n    urlParams.forEach(param => {\n        url = new URL(param, url);\n    });\n\n    url.searchParams.set(\"apikey\", apiKey);\n\n    Object.entries(queryParams).forEach(([key, value]) => {\n        url.searchParams.set(key, value)\n    })\n\n    return url;\n}\n\nexport const api = ({ getState, dispatch }) => next =>\n    async (action) => {\n        next(action);\n\n        if (action.type !== 'API')\n            return;\n\n        try {\n            dispatch(apiStart());\n\n            const {\n                url,\n                body,\n                urlParams = [],\n                queryParams = {},\n                method = 'GET',\n                onSuccess,\n                onFailure\n            } = action.payload;\n\n            const response = await fetch(createUrl(url, urlParams, queryParams), {\n                method: method.toUpperCase(),\n                body: JSON.stringify(body),\n                mode: 'cors',\n                cache: \"no-cache\",\n                credentials: \"same-origin\",\n            })\n\n            if (response.ok) {\n                const data = await response.json()\n                onSuccess && dispatch(onSuccess(data))\n            }\n            else {\n                onFailure && dispatch(onFailure(response.status))\n            }\n        }\n        catch (error) {\n            console.log('[api middleware]:', error)\n            dispatch(apiError(error))\n        }\n        finally {\n            dispatch(apiEnd())\n        }\n    }","import produce from 'immer';\nimport * as actionTypes from '../constants/action-types'\nimport _ from 'lodash'\n\nconst initState = {\n    locations: [],\n    loading: false,\n    error: null,\n    autocomplete: [],\n    locationsToForecastsMap: new Map(),\n}\n\nexport default (state = initState, action) =>\n    produce(state, draft => {\n        switch (action.type) {\n            case actionTypes.ADD_LOCATION:\n                draft.locations.push(action.payload);\n                break;\n            case actionTypes.API_START:\n                draft.loading = true;\n                break;\n            case actionTypes.API_END:\n                draft.loading = false;\n                break;\n            case actionTypes.API_ERROR:\n                console.log('setting error:', action.payload)\n                draft.error = action.payload;\n                break;\n            case actionTypes.ShowLocations:\n                draft.autocomplete = action.payload;\n                break;\n            case actionTypes.REMOVE_LOCATION:\n                draft.locations = _.remove(draft.locations, x => action.payload === x)\n                draft.locationsToForecastsMap.delete(action.payload);\n            break;\n            case actionTypes.SET_LOCATION_FORECAST:\n                const {location, forecast} = action.payload\n                draft.locationsToForecastsMap.set(location, forecast);\n                break;\n            default:\n                break;\n        }\n    })","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { api } from './middlewares/api'\nimport { logger } from './middlewares/logger'\nimport { thunk } from './middlewares/thunk'\nimport reducers from './reducers';\n\nconst store = createStore(reducers,\n    composeWithDevTools(applyMiddleware(\n        thunk,\n        // logger,\n        api\n    )));\nexport default store;","export const thunk = ({ getState, dispatch }) =>\n    next =>\n        action => typeof action === 'function' ?\n            action(dispatch, getState) :\n            next(action);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));"],"sourceRoot":""}